#!/bin/bash

source $DRAGONBUILD/internal/dragoncolors
install=0
build=0
gen=0
clean=0
exportt=0
export release=0

gen_tbd_from_lib=1

ToolchainPath=""
ToolchainPrefix=""
command -v ldid >/dev/null || export ToolchainPath="${DRAGONBUILD}/toolchain/bin/"; export ToolchainPrefix="";

set -o pipefail

function cleanbuildfail {
    echo -e "${PrefixColor}[Dragon]${BoldColor} Build failed${NC}"
    # rm ${LOGOS_FILE}.m 2>/dev/null
    echo -e "${PrefixColor}[Dragon]${BoldColor} Cleaning Up${NC}"
    exit
}

export NINJA_STATUS="\x1b[34m[Dragon] [%f/%t] (%e)"

usage()
{
    echo "-=-=-"
    echo "usage: dragon [d|do] [g|gen|generate] [b|build|make] [i|install] [c|clean] [export]"
    echo "-=-=-"
    echo "d|do - Build and Install"
    echo "g|gen|generate - DEPRECATED. Generation is automatic."
    echo "b|build|make - Compile, link, and package your project"
    echo "i|install - Install to device located at \$DRBIP"
    echo "r|release - Load DragonRelease variables after DragonMake is loaded"
    echo "export - Tell ninja to create a compile_commands.json"
    echo "-=-=-"
}

printBan()
{
    cat $DRAGONBUILD/internal/banner.txt                                             
}

mkdir -p .dragon/ninja > /dev/null

mkdir -p .dragon/modules > /dev/null

# First, get a md5 of the package directory list

while [ "$1" != "" ]; do
    case $1 in
        d | do)                 build=1
                                install=1
                                ;;
        g | gen | generate)     gen=1
                                ;;
        n | nic | new)          python3 $DRAGONBUILD/bin/nic.py 
                                exit
                                ;;
        exp | export)           exportt=1
                                build=1
                                ;;
        b | build | make)       build=1
                                ;;
        i | install )           install=1
                                ;;
        r | release )           export release=1
                                ;;
        c | clean )             clean=1
                                ;;
        h | help | -h)          usage
                                exit
                                ;;
        v | -v )                alias ninja="ninja -v"
                                ;;
        * )                     usage
                                exit 1
    esac # who comes up with this syntax lol
    shift
done

cwd=$(basename $PWD)

if [ -f "DragonMake" ]; then  
    true
else
    gen=1
fi

if [ -d ".dragon" ]; then  
    true
else
    gen=1
fi

gen=1

if [ $gen == 1 ]; then 
    rm -rf .dragon/ninja/build.ninja 
    mkdir -p .dragon/ninja
    source $DRAGONBUILD/DragonGen/DragonGen
fi

if [ $build == 1 ]; then 
    if [ -z "$project_dirs" ]; then
        echo "yeet" > /dev/null 
    else 
        set -f
        subsb=(${project_dirs})
        set +f 
        for i in "${subsb[@]}"; do

            if [ $clean == 1 ]; then 
                if [ $i == "." ]; then 
                    echo -e "${PrefixColor}[Dragon]${BoldColor} Cleaning ${TWEAK_NAME}${NC}"
                else
                    echo -e "${PrefixColor}[Dragon]${BoldColor} Cleaning ${i}${NC}"
                fi
                rm -rf .dragon/build 
                rm -rf .dragon/obj
                rm -rf .dragon/hash
            fi
            if [ $i == "." ]; then 
                echo -e "${PrefixColor}[Dragon]${BoldColor} Building ${TWEAK_NAME}${NC}"
            else
                echo -e "${PrefixColor}[Dragon]${BoldColor} Building ${i}${NC}"
            fi
            cd $i
            env $'NINJA_STATUS=\x1b[1;34m[Dragon] \x1b[35m[%f/%t] \x1b[34m(%e)\x1b[0m ' CLICOLOR_FORCE=1 ninja -j50 || cleanbuildfail
            if [ $exportt == 1 ]; then 
                echo -e "${PrefixColor}[Dragon]${BoldColor} Generating compile_commands.json ${NC}"
                ninja -t compdb $(awk '/^rule (C|CXX)_COMPILER__/ { print $2 }' build.ninja) > compile_commands.json
            fi
            rm build.ninja 
            cp -R .dragon/_ ../.dragon
            if [ $i == "." ]; then 
                true
            else
            cd ..
            fi
        done
    fi

    echo -e "${PrefixColor}[Dragon]${NC} Generating Package Structure"
    mkdir -p .dragon/_/DEBIAN 
    cp control .dragon/_/DEBIAN/control 
    cp -R layout/* .dragon/_/ 2>/dev/null
    chmod -R 0755 .dragon/_/DEBIAN/*
    mkdir -p .dragon/packages
    echo -e "${PrefixColor}[Dragon]${BoldColor} Building Package${NC}"
    dpkg-deb --build -Zgzip -z9 .dragon/_ .dragon/packages/
    GENOUTPUT="$(ls .dragon/packages)"
    mkdir -p packages 2> /dev/null
    cp .dragon/packages/${GENOUTPUT} packages/${GENOUTPUT}
    echo -e "${PrefixColor}[Dragon]${NC} Cleaning Up"
    echo "${GENOUTPUT}" > .dragon/last_package
fi



if [ $install == 1 ]; then 
    if [ -z "$DRBPORT" ]; then
        DRBPORT=22
    fi
    if [ -z "$DRBIP" ]; then
        echo -e "${PrefixColor}[Dragon]${NC} The \$DRBIP variable is not set!"
        rm -rf .dragon/packages > /dev/null
        exit
    fi
    OUTPUT="$(cat .dragon/last_package | tr -d '\040\011\012\015' )"

    if [ -z "$OUTPUT" ]; then
        echo -e "${PrefixColor}[Dragon]${BoldColor} Packaging Failed${NC}"
        exit 
    fi

    scp -P $DRBPORT packages/${OUTPUT} root@$DRBIP:/var/mobile/${OUTPUT} && ssh -p $DRBPORT root@$DRBIP "dpkg -i /var/mobile/${OUTPUT}" && ssh -p $DRBPORT root@$DRBIP "rm -rf /var/mobile/${OUTPUT}"
    
    echo -e "${PrefixColor}[Dragon]${BoldColor} Running '${INSTALL_CMD}' ${NC}"
    ssh -p $DRBPORT root@$DRBIP "${INSTALL_CMD}"
fi

rm -rf .dragon/packages > /dev/null